// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  pseudonym              String?
  email                  String?                 @unique
  emailVerified          DateTime?
  registered_at          DateTime?               @default(now())
  image                  String?
  pseudonym_image        String?
  servers                Server[]
  sessions               Session[]
  memberships            Server_Member[]
  adminships             Server_Admin[]
  provider               String?
  refresh_token          String?
  access_token           String?
  token_expiration       DateTime?
  type                   Json?
  real_name_use          String                  @default("ask")
  name_display_pref      String                  @default("real")
  bio                    String?
  comments               Comment[]
  account                Account[]
  WSConnection           WSConnection[]
  friends                String?
  friend_requests_inc    String?
  friend_requests_out    String?
  initiatedConversations Conversation_junction[] @relation("InitiatedConversations")
  receivedConversations  Conversation_junction[] @relation("ReceivedConversations")
  DirectMessage          DirectMessage[]
}

model Server {
  id         Int              @id @default(autoincrement())
  name       String
  blurb      String?
  logo_url   String?
  banner_url String?
  ownerId    String
  category   String           @default("other")
  type       String           @default("private")
  owner      User             @relation(fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  admin      Server_Admin[]
  members    Server_Member[]
  channels   Server_Channel[]

  @@index([ownerId])
}

model Server_Admin {
  id         Int      @id @default(autoincrement())
  roles      Json
  admin      User     @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId    String
  Server     Server   @relation(fields: [ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ServerId   Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@index([adminId])
  @@index([ServerId])
}

model Server_Member {
  id        Int      @id @default(autoincrement())
  member    User     @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId  String
  Server    Server   @relation(fields: [ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ServerId  Int
  joinedAt  DateTime @default(now())
  invitedBy String

  @@index([memberId])
  @@index([ServerId])
}

model Server_Channel {
  id          Int       @id @default(autoincrement())
  name        String
  Server      Server    @relation(fields: [ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ServerId    Int
  description String?
  comments    Comment[]
  type        String

  @@index([ServerId])
}

model Comment {
  id        Int            @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  message   String
  channel   Server_Channel @relation(fields: [channelID], references: [id], onDelete: Cascade)
  channelID Int

  @@index([userId])
  @@index([channelID])
}

model Conversation {
  id                Int                     @id @default(autoincrement())
  userConversations Conversation_junction[]
  DirectMessage     DirectMessage[]
}

model Conversation_junction {
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  initiator      User         @relation("InitiatedConversations", fields: [initiatorId], references: [id])
  initiatorId    String
  receiver       User         @relation("ReceivedConversations", fields: [receiverId], references: [id])
  receiverId     String

  @@id([conversationId, initiatorId, receiverId])
  @@index([initiatorId])
  @@index([receiverId])
  @@index([conversationId])
}

model DirectMessage {
  id             Int          @id @default(autoincrement())
  message        String
  sender         User         @relation(fields: [senderID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderID       String
  read           Boolean
  conversation   Conversation @relation(fields: [conversationID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  conversationID Int

  @@index([conversationID])
  @@index([senderID])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WSConnection {
  connectionID String  @id
  user         User?   @relation(fields: [userId], references: [id])
  userId       String? @unique
  channelID    Int?
  inCall       Boolean @default(false)

  @@index([userId])
}
