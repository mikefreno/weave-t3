// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                     String                    @id @default(cuid())
  name                   String?
  pseudonym              String?
  email                  String?                   @unique
  emailVerified          DateTime?
  registered_at          DateTime?                 @default(now())
  image                  String?
  pseudonym_image        String?
  servers                Server[]
  sessions               Session[]
  memberships            Server_Member[]
  adminships             Server_Admin[]
  provider               String?
  refresh_token          String?
  access_token           String?
  token_expiration       DateTime?
  type                   Json?
  real_name_use          String                    @default("ask")
  name_display_pref      String                    @default("real")
  bio                    String?
  comments               Comment[]
  account                Account[]
  WSConnection           WSConnection[]
  friendship_junction    Friendship_junction[]
  friendRequest_junction Friend_Request_junction[]
  conversation_junction  Conversation_junction[]
  Suspended_Member       Suspended_Member[]
  Banned_Member          Banned_Member[]
  DirectMessage          DirectMessage[]
}

model Server {
  id               Int                @id @default(autoincrement())
  name             String             
  blurb            String?
  logo_url         String?
  banner_url       String?
  realNameEnforced Boolean            @default(false)
  ownerId          String
  category         String             @default("other")
  public           Boolean            @default(false)
  searchable       Boolean            @default(true)
  emojiReactions   String             @default("thumbsUp,thumbsDown")
  weaveCreated     Boolean            @default(false)
  //unlisted in a queue for deletion
  unlisted         Boolean            @default(false)
  owner            User               @relation(fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  admin            Server_Admin[]
  members          Server_Member[]
  channels         Server_Channel[]
  suspendedMembers Suspended_Member[]
  bannedMembers    Banned_Member[]

  @@index([ownerId])
}

model Server_Admin {
  id         Int      @id @default(autoincrement())
  roles      Json?
  admin      User     @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId    String
  Server     Server   @relation(fields: [ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ServerId   Int
  assignedAt DateTime @default(now())
  assignedBy String
  joinedAt   DateTime
  invitedBy  String

  @@index([adminId])
  @@index([ServerId])
}

model Server_Member {
  id        Int      @id @default(autoincrement())
  member    User     @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId  String
  Server    Server   @relation(fields: [ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ServerId  Int
  joinedAt  DateTime @default(now())
  invitedBy String

  @@index([memberId])
  @@index([ServerId])
}

model Suspended_Member {
  id                   Int      @id @default(autoincrement())
  member               User     @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId             String
  Server               Server   @relation(fields: [ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ServerId             Int
  joinedAt             DateTime @default(now())
  invitedBy            String
  suspendedAt          DateTime @default(now())
  suspendedById        String
  suspensionExpiration DateTime

  @@index([memberId])
  @@index([ServerId])
}

model Banned_Member {
  id         Int      @id @default(autoincrement())
  member     User     @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId   String
  Server     Server   @relation(fields: [ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ServerId   Int
  joinedAt   DateTime @default(now())
  invitedBy  String
  bannedAt   DateTime @default(now())
  bannedById String

  @@index([memberId])
  @@index([ServerId])
}

model Server_Channel {
  id          Int       @id @default(autoincrement())
  name        String
  Server      Server    @relation(fields: [ServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ServerId    Int
  description String?
  comments    Comment[]
  type        String

  @@index([ServerId])
}

model Comment {
  id        Int            @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  message   String
  channel   Server_Channel @relation(fields: [channelID], references: [id], onDelete: Cascade)
  channelID Int
  reactions Reaction[]

  @@index([userId])
  @@index([channelID])
}

model Reaction {
  id              Int            @id @default(autoincrement())
  comment         Comment?       @relation(fields: [commentID], references: [id], onDelete: Cascade)
  commentID       Int?
  type            String
  count           Int
  reactingUsers   String
  directMessage   DirectMessage? @relation(fields: [directMessageId], references: [id])
  directMessageId Int?

  @@index([commentID])
  @@index([directMessageId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WSConnection {
  connectionID   String  @id
  user           User?   @relation(fields: [userId], references: [id])
  userId         String? @unique
  channelID      Int?
  conversationID Int?
  inCall         Boolean @default(false)

  @@index([userId])
}

model Friendship {
  id                  Int                   @id @default(autoincrement())
  start               DateTime              @default(now())
  friendship_junction Friendship_junction[]

}

model Friendship_junction {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID       String
  friendID     String
  friendship   Friendship @relation(fields: [friendshipID], references: [id], onDelete: Cascade)
  friendshipID Int

  @@unique([userID, friendshipID])
  @@index([friendshipID])
}

model Friend_Request {
  id                     Int                       @id @default(autoincrement())
  sentAt                 DateTime                  @default(now())
  friendRequest_junction Friend_Request_junction[]
  senderID               String
  targetID String 
  ignored                Boolean                   @default(false)
}

model Friend_Request_junction {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID          String
  friendRequest   Friend_Request @relation(fields: [friendRequestID], references: [id], onDelete: Cascade)
  friendRequestID Int

  @@unique([userID, friendRequestID])
  @@index([friendRequestID])
}

model Conversation {
  id                    Int                     @id @default(autoincrement())
  directMessage         DirectMessage[]
  conversation_junction Conversation_junction[]
  initiatorID           String
  receiverID            String
  initAt                DateTime                @default(now())
  accepted              Boolean                 @default(false)
  ignored               Boolean                 @default(false)
}

model Conversation_junction {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID         String
  conversation   Conversation @relation(fields: [conversationID], references: [id], onDelete: Cascade)
  conversationID Int

  @@unique([userID, conversationID])
  @@index([conversationID])
}

model DirectMessage {
  id             Int          @id @default(autoincrement())
  message        String
  sender         User         @relation(fields: [senderID], references: [id], onDelete: Cascade)
  senderID       String
  read           Boolean      @default(false)
  reactions      Reaction[]
  conversation   Conversation @relation(fields: [conversationID], references: [id], onDelete: Cascade)
  conversationID Int
  sentAt         DateTime     @default(now())

  @@index([conversationID])
  @@index([senderID])
}
